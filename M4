import numpy as np
import pandas as pd

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Generate sample data
data = pd.DataFrame({
    'x1': np.random.rand(100),
    'x2': np.random.rand(100),
    'y': np.random.randint(0, 2, 100)
})

X = data[['x1', 'x2']].values
y = data['y'].values
X = np.hstack((np.ones((X.shape[0], 1)), X))  # Add intercept

theta = np.zeros(X.shape[1])
alpha = 0.01
iterations = 1000

# Gradient Descent
for _ in range(iterations):
    z = X @ theta
    h = sigmoid(z)
    gradient = X.T @ (h - y) / y.size
    theta -= alpha * gradient

print(f"Coefficients: {theta}")
